#!/usr/bin/env python
# -*- mode: python -*-
#
# This file is part of eventmq.
#
# eventmq is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 2.1 of the License, or (at your option)
# any later version.
#
# eventmq is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with eventmq.  If not, see <http://www.gnu.org/licenses/>.
import argparse
import sys

from future.utils import iteritems

from eventmq import exceptions
from eventmq.jobmanager import JobManager
from eventmq.log import setup_logger
from eventmq.settings import build_parser_arguments


if __name__ == "__main__":
    logger = setup_logger('')
    parser = argparse.ArgumentParser(
        description='Listen for job requests and manage their execution')

    build_parser_arguments(parser, 'jobmanager')

    cli_args = vars(parser.parse_args())

    # queues come in as a crazy list of lists of characters. this little loop
    # cleans them up.
    if 'queues' in cli_args:
        queues = []
        for q in cli_args['queues']:
            try:
                weight, name = ''.join(q).split(',')
                queues.append([int(weight), name])
            except ValueError:
                logger.error('Invalid weight,queue pair {}'.format(
                    ''.join(q)))
                sys.exit(1)
        cli_args['queues'] = queues

    # convert cli arg key names to upper case so they override the correct
    # settings during initialization.
    cli_args = {k.upper(): v for k, v in iteritems(cli_args)}
    j = JobManager(override_settings=cli_args)
    try:
        j.start()
    except exceptions.ConnectionError as e:
        logger.error(e.message)
        sys.exit(1)
